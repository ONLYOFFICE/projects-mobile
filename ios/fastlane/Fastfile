fastlane_version "2.62.1"

fastlane_require 'dotenv'
Dotenv.load '.env.secret'

default_platform :ios
skip_docs # Do not create fastlane/README.md

def escape_markdown2(string)
    pattern = /(\[|\_|\*|\[|\`)/
    string.gsub(pattern){|match|"\\"  + match}
end

def truncate(string, max)
    string.length > max ? "#{string[0...max]}\n..." : string
end

platform :ios do
  version_name = '1.0'
  version_code = 1
  increase_version_code = nil

  before_all do
    read_version

    ENV["FASTLANE_XCODEBUILD_SETTINGS_RETRIES"] = "10"
    ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "60"
    ENV["FASTLANE_XCODE_LIST_TIMEOUT"] = "60"

  end

  desc "Read Flutter app version info from local(pubspec.yaml)"
  lane :read_version do
    version_name = flutter_version()["version_name"]
    version_code = flutter_version()["version_code"]
    increase_version_code = version_code.to_i + 1
  end

  desc "Fetch Flutter packages"
  lane :get_packages do
    Dir.chdir "../.." do
      sh("flutter", "packages", "get")
    end
  end

  desc "Cleanup build"
  lane :cleanup do
    Dir.chdir "../.." do
      sh("flutter", "clean")
    end
  end

  desc "Increment build number"
  lane :increment_build do |options|
    # RegExr for increasing build number. e.g version: 1.0.0+1 > version: 1.0.0+2
    increase_pubspec_build_number = 's/^(version:\\s+\d+\.\d+\.\d+\+)(\d+)$/$1.(' + "#{increase_version_code}" + ')/e'
    Dir.chdir "../.." do
      sh("perl", "-i", "-pe", increase_pubspec_build_number, "pubspec.yaml") # Bump pubspec's build number
    end
  end

  desc "Build the application"
  lane :make_app do
    Dir.chdir "../.." do
      sh("flutter", "build", "ios", "--release", "--no-codesign", "--build-name=#{version_name}", "--build-number=#{increase_version_code}")
    end
  end

  desc "Submit to Play Market via CI"
  lane :ci do
    # get the last commit comments from Git history
    # and creates our changelog
    change_log = changelog_from_git_commits(
      pretty: "- %s",
      date_format: "short",
      match_lightweight_tag: false,
      merge_commit_filtering: "exclude_merges"
    )

    change_log = truncate(escape_markdown2(change_log), 3500)

    # Build artifacts and upload to store
    get_packages
    cleanup
    increment_build

    cocoapods(
      repo_update: true
    )

    make_app

    # build iOS app
    gym(
      scheme: "Runner",
      configuration: "Release",
      export_method: "app-store",
      xcargs: "-allowProvisioningUpdates"
    )

    git_commit(
      path: "../pubspec.yaml",
      message: "Version bumped to v#{version_name}(#{increase_version_code})",
    )

    # create a local tag with the new version
    add_git_tag(
      tag: "ios/v#{version_name}-#{increase_version_code}",
      build_number: increase_version_code
    )

    # push changes
    push_to_git_remote

    # Use the shared value in lane context
    app_store_connect_api_key(
      key_id: ENV['API_KEY_ID'],
      issuer_id: ENV['API_ISSUER_ID'],
      key_content: ENV['API_KEY_CONTENT'],
      in_house: false
    )

    # Submit to iTunes Connect
    pilot(
      app_identifier: ENV["APP_DEV_IDENTIFIER"],
      skip_waiting_for_build_processing: false
    )

    if ENV["TELEGRAM_PROJECTS_IOS_MESSAGE"]
      begin
        telegram(
          token: ENV['TELEGRAM_BOT_TOKEN'],
          chat_id: ENV['TELEGRAM_CHAT_ID'],
          parse_mode: 'Markdown',
          text: ENV["TELEGRAM_PROJECTS_IOS_MESSAGE"] % [version_number: "#{version_name}", build_number: "#{increase_version_code}", change_log: "#{change_log}"]
        )
      rescue => ex
        UI.error(ex)
      end
    end
  
  end


  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


